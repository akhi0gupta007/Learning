package com.ds;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public class Sorting {
    static Integer a[] = {9000, 301, 398, 399, 533, 8, 206, 990, 552, 663, 755, 133, 791, 274, 955, 338, 168, 220, 706, 452, 139, 175, 391,
            616, 248, 41, 582, 522, 167, 203, 294, 454, 956, 881, 117, 21, 585, 944, 169, 864, 856, 86, 699, 432, 694, 211, 276, 325,
            633, 448, 116, 471, 126, 65, 334, 644, 763, 147, 597, 335, 144, 389, 18, 572, 882, 331, 877, 487, 150, 23, 857, 578, 959,
            729, 89, 831, 488, 333, 420, 745, 92, 91, 872, 61, 257, 880, 991, 667, 564, 100, 125, 878, 458, 692, 654, 78, 381, 618, 24,
            380, 540, 309, 750, 62, 109, 960, 443, 571, 665, 200, 837, 513, 318, 965, 649, 541, 826, 151, 817, 341, 415, 173, 444, 637,
            775, 575, 129, 779, 366, 51, 459, 286, 350, 395, 308, 906, 977, 349, 925, 134, 821, 232, 387, 639, 723, 770, 994, 339, 354,
            915, 823, 440, 434, 609, 843, 49, 137, 782, 835, 828, 67, 584, 772, 953, 917, 19, 411, 510, 714, 45, 551, 978, 903, 268, 445,
            110, 759, 58, 737, 70, 647, 103, 879, 807, 808, 405, 1, 914, 901, 408, 908, 217, 466, 800, 592, 114, 178, 773, 852, 809, 570,
            532, 106, 230, 640, 319, 140, 830, 740, 113, 728, 716, 365, 589, 249, 456, 332, 374, 447, 744, 352, 984, 34, 386, 483, 869,
            136, 231, 195, 250, 946, 442, 329, 620, 37, 862, 874, 929, 758, 277, 519, 478, 222, 17, 292, 43, 159, 698, 961, 74, 269, 237,
            886, 793, 732, 327, 642, 845, 484, 84, 414, 270, 726, 876, 351, 282, 214, 56, 236, 6, 424, 102, 952, 403, 537, 256, 267, 156, 670,
            719, 783, 893, 375, 347, 844, 202, 235, 858, 628, 146, 621, 539, 849, 5, 83, 99, 687, 33, 298, 393, 293, 680, 357, 9, 743, 204, 530, 780,
            766, 512, 130, 839, 330, 774, 29, 287, 299, 419, 157, 497, 40, 708, 635, 720, 765, 313, 208, 868, 587, 90, 64, 104, 601, 60, 315, 69, 342, 344, 472, 435, 340, 748, 528, 926, 964, 506, 682, 700, 899, 724, 421, 989, 251, 907, 787, 88, 810, 509, 916, 182, 954, 404, 394, 769, 392, 218, 672, 174, 662, 120, 883, 703, 646, 922, 272, 297, 749, 163, 300, 155, 372, 517, 400, 223, 976, 263, 543, 73, 985, 686, 176, 451, 594, 776, 593, 486, 71, 258, 966, 229, 734, 108, 825, 781, 38, 26, 889, 676, 210, 260, 247, 968, 35, 875, 684, 605, 997, 388, 840, 463, 27, 383, 967, 854, 409, 555, 860, 727, 132, 920, 489, 851, 554, 514, 199, 213, 771, 507, 617, 919, 795, 867, 480, 271, 253, 873, 413, 898, 457, 986, 312, 815, 546, 362, 721, 281, 614, 284, 304, 865, 515, 683, 784, 574, 10, 131, 224, 436, 625, 652, 306, 583, 598, 233, 834, 376, 165, 950, 655, 595, 705, 733, 796, 477, 931, 599, 979, 80, 378, 904, 485, 402, 360, 59, 455, 422, 586, 937, 359, 841, 66, 324, 738, 227, 397, 160, 790, 450, 556, 638, 461, 629, 503, 122, 460, 668, 717, 565, 534, 52, 836, 238, 936, 115, 761, 12, 833, 135, 691, 747, 718, 119, 842, 93, 179, 927, 863, 939, 428, 264, 191, 891, 811, 679, 368, 527, 254, 751, 311, 68, 295, 273, 725, 563, 660, 778, 430, 814, 742, 789, 493, 643, 704, 923, 255, 590, 829, 96, 788, 603, 187, 194, 77, 345, 55, 53, 337, 475, 702, 518, 355, 666, 678, 371, 764, 711, 162, 675, 895, 226, 13, 7, 641, 47, 566, 529, 85, 410, 569, 479, 244, 885, 98, 606, 54, 777, 265, 198, 412, 973, 942, 492, 588, 664, 656, 192, 756, 181, 20, 707, 813, 188, 697, 746, 993, 812, 531, 446, 754, 361, 757, 245, 859, 932, 689, 542, 423, 798, 871, 469, 612, 557, 619, 346, 216, 161, 958, 39, 853, 975, 924, 180, 884, 36, 87, 382, 464, 897, 112, 490, 802, 650, 827, 645, 367, 615, 425, 887, 501, 567, 476, 243, 987, 141, 577, 384, 962, 473, 630, 622, 896, 948, 735, 433, 888, 205, 632, 336, 974, 846, 905, 611, 848, 762, 996, 185, 285, 631, 736, 712, 943, 326, 855, 861, 379, 22, 713, 516, 390, 963, 820, 792, 406, 75, 661, 504, 992, 196, 677, 25, 240, 3, 710, 16, 870, 225, 786, 407, 806, 602, 500, 2, 768, 626, 246, 693, 681, 252, 634, 730, 57, 302, 573, 933, 239, 259, 370, 491, 396, 824, 11, 79, 947, 970, 866, 576, 930, 607, 124, 193, 215, 536, 951, 369, 314, 416, 177, 322, 462, 467, 911, 568, 547, 505, 525, 613, 610, 72, 949, 121, 935, 234, 429, 596, 496, 957, 674, 275, 580, 63, 511, 913, 548, 651, 890, 945, 418, 499, 544, 521, 608, 562, 526, 143, 373, 439, 520, 545, 847, 470, 291, 940, 14, 995, 696, 76, 172, 918, 166, 550, 278, 107, 797, 690, 171, 46, 465, 553, 688, 739, 94, 82, 938, 283, 30, 310, 581, 207, 401, 358, 44, 894, 999, 190, 988, 709, 558, 559, 579, 164, 184, 850, 1000, 209, 818, 50, 983, 495, 671, 261, 95, 731, 289, 142, 659, 767, 549, 591, 158, 262, 145, 441, 900, 822, 468, 941, 127, 657, 535, 197, 523, 722, 741, 316, 481, 508, 998, 785, 934, 427, 902, 42, 363, 317, 15, 438, 910, 97, 604, 279, 437, 128, 494, 623, 560, 4, 123, 805, 685, 305, 921, 969, 695, 148, 170, 296, 928, 838, 152, 752, 81, 377, 189, 804, 431, 801, 221, 972, 417, 538, 201, 303, 624, 981, 153, 228, 658, 474, 138, 31, 149, 561, 980, 636, 502, 600, 449, 105, 154, 118, 241, 111, 353, 892, 482, 343, 101, 794, 356, 348, 760, 832, 819, 290, 909, 266, 280, 364, 982, 524, 816, 971, 48, 288, 653, 669, 32, 320, 753, 803, 648, 186, 212, 912, 219, 28, 328, 627, 426, 673, 307, 498, 385, 242, 701, 321, 453, 715, 183, 799, 323};

    public static void main(String[] args) {
        Util.traverse(a);
        List<Integer> list = convertToList(a);
        Long init = System.currentTimeMillis();
        List<Integer> collect = Arrays.stream(a).collect(Collectors.toList());
        // selectionSort();
          mergeSort(a);
        //insertionSort();
        //Collections.sort(list);
       // bubbleSort();
        Long finalT = System.currentTimeMillis();
        System.out.println((init));
        System.out.println((finalT));
        System.out.println(String.format("Took %d milliseconds", finalT - init));
        Util.traverse(a);
    }

    public static void bubbleSort() {
        int temp = 0;
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < (a.length - i) - 1; j++) {
                if(a[j] > a [j+1]){
                    temp = a[j];
                    a[j] = a[j+1];
                    a[j+1] = temp;
                }
            }
        }
    }

    private static List<Integer> convertToList(Integer[] a) {
        List<Integer> list = new ArrayList<>();
        for (int x : a) {
            list.add(x);
        }
        return list;
    }

    public static void insertionSort() {
        for (int i = 1; i < a.length; i++) {
            int hole = i;
            int value = a[hole];
            while (hole > 0 && a[hole - 1] > value) {
                a[hole] = a[hole - 1];
                hole--;
            }
            a[hole] = value;
        }
    }

    public static void selectionSort() {
        for (int i = 0; i < a.length; i++) {
            int minIndex = i, temp = -1;
            for (int j = i + 1; j < a.length; j++) {
                if (a[minIndex] > a[j]) {
                    minIndex = j;
                }
            }
            temp = a[i];
            a[i] = a[minIndex];
            a[minIndex] = temp;
        }
    }

    public static void mergeSort(Integer a[]) {
        if (a.length == 1)
            return;
        int mid = a.length / 2 + a.length % 2;
        Integer[] larr = new Integer[mid];
        Integer[] rarr = new Integer[a.length - mid];
        Util.split(a, larr, rarr, mid);
        mergeSort(larr);
        mergeSort(rarr);
        merge(larr,rarr,a);
    }

    public static void merge(Integer[] larr, Integer[] rarr, Integer[] marr) {
        int i = 0, j = 0, k = 0;
        int nL = larr.length, nR = rarr.length, nM = marr.length;
        while (i < nL && j < nR) {
            if (larr[i] < rarr[j]) {
                marr[k] = larr[i];
                i++;
            } else {
                marr[k] = rarr[j];
                j++;
            }
            k++;
        }
        while (i < nL) {
            marr[k] = larr[i];
            i++;
            k++;
        }
        while (j < nR) {
            marr[k] = rarr[j];
            j++;
            k++;
        }

    }

}
